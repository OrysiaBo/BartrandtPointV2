#!/usr/bin/env python3
"""
Dynamic Messe Stand V4 - –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –° –í–ï–ë-–°–ï–†–í–ï–†–û–ú
Bertrandt Interactive Display System mit Remote-Zugriff
"""
import sys
import os
import argparse
import atexit

# –ü—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å
sys.path.insert(0, os.path.dirname(__file__))

from core.logger import logger
from core.config import config
from models.hardware import hardware_manager
from services.web_server import web_server

def setup_hardware():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Hardware-Verbindungen"""
    logger.info("üîå Hardware-Setup wird gestartet...")
    
    try:
        # ESP32-Verbindungen –¥–æ–±–∞–≤–∏—Ç—å
        esp32_1 = hardware_manager.add_esp32(config.hardware['esp32_1_port'], 1)
        esp32_2 = hardware_manager.add_esp32(config.hardware['esp32_2_port'], 2)
        esp32_3 = hardware_manager.add_esp32(config.hardware['esp32_3_port'], 3)
        
        # Arduino GIGA –¥–æ–±–∞–≤–∏—Ç—å
        giga = hardware_manager.add_giga(config.hardware['giga_port'])
        
        # Verbindungen herstellen
        results = hardware_manager.connect_all()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        for device, success in results.items():
            status = "‚úÖ Verbunden" if success else "‚ùå Fehler"
            logger.info(f"{device}: {status}")
        
        return any(results.values())  # True –µ—Å–ª–∏ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        
    except Exception as e:
        logger.error(f"Fehler beim Hardware-Setup: {e}")
        return False

def setup_web_server(auto_start=True):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üåê Web-Server-Setup wird gestartet...")
    
    try:
        if auto_start:
            success = web_server.start_server()
            if success:
                server_info = web_server.get_server_info()
                logger.info(f"‚úÖ Web-Server gestartet: {server_info['url']}")
                logger.info("üì± Remote-Zugriff verf√ºgbar f√ºr Tablet/Smartphone")
                
                # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                atexit.register(cleanup_web_server)
                
                return True
            else:
                logger.warning("‚ùå Web-Server konnte nicht gestartet werden")
                logger.info("   Port 8080 m√∂glicherweise belegt - kann sp√§ter manuell gestartet werden")
                return False
        else:
            logger.info("Web-Server konfiguriert (manueller Start)")
            return True
            
    except Exception as e:
        logger.error(f"Fehler beim Web-Server-Setup: {e}")
        return False

def cleanup_web_server():
    """Cleanup-Funktion f√ºr –í–µ–±-—Å–µ—Ä–≤–µ—Ä"""
    try:
        if web_server.running:
            web_server.stop_server()
            logger.info("Web-Server gestoppt")
    except Exception as e:
        logger.error(f"Fehler beim Stoppen des Web-Servers: {e}")

def create_and_run_gui(esp32_port=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç GUI-Anwendung —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç GUI-Klasse –∏–∑ ui/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        from ui.main_window import MainWindow
        
        logger.info("üñ•Ô∏è GUI wird initialisiert...")
        gui_app = MainWindow(esp32_port=esp32_port)
        
        logger.info("‚úÖ Dynamic Messe Stand V4 erfolgreich gestartet!")
        logger.info("üí° Dr√ºcke F11 f√ºr Vollbild, ESC zum Verlassen")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ
        if web_server.running:
            server_info = web_server.get_server_info()
            logger.info(f"üåê Web-Interface verf√ºgbar: {server_info['url']}")
            logger.info("üì± F√ºr Remote-Steuerung Browser √∂ffnen und URL eingeben")
        
        # GUI-Hauptschleife –∑–∞–ø—É—Å—Ç–∏—Ç—å
        gui_app.run()
        
    except ImportError as e:
        logger.error(f"GUI-Import-Fehler: {e}")
        logger.info("üìÑ Fallback: Textbasierte Anwendung wird gestartet...")
        run_text_mode()
    except SyntaxError as e:
        logger.error(f"GUI-Syntax-Fehler: {e}")
        logger.error("üîß Bitte √ºberpr√ºfen Sie die Syntax in den UI-Dateien")
        logger.info("üìÑ Fallback: Textbasierte Anwendung wird gestartet...")
        run_text_mode()
    except Exception as e:
        logger.error(f"GUI-Fehler: {e}")
        logger.info("üìÑ Fallback: Textbasierte Anwendung wird gestartet...")
        run_text_mode()

def run_text_mode():
    """Fallback-–†–µ–∂–∏–º –±–µ–∑ GUI —Å –≤–µ–±-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    logger.info("üìù Textmodus aktiv - Dr√ºcke 'q' + Enter zum Beenden")
    logger.info("üåê Web-Interface bleibt verf√ºgbar f√ºr Remote-Steuerung")
    
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        print("\n" + "="*50)
        print("BERTRANDT DYNAMIC MESSE STAND V4 - TEXT MODUS")
        print("="*50)
        
        if web_server.running:
            server_info = web_server.get_server_info()
            print(f"üì± Web-Interface: {server_info['url']}")
            print("   √ñffnen Sie diese URL im Browser f√ºr Remote-Steuerung")
        
        print("\nVerf√ºgbare Befehle:")
        print("  status  - System-Status anzeigen")
        print("  web     - Web-Server Status/Toggle")
        print("  slides  - Pr√§sentations-Info")
        print("  demo    - Demo starten/stoppen")
        print("  test    - Hardware-Test durchf√ºhren")
        print("  q       - Beenden")
        print("-"*50)
        
        while True:
            user_input = input("\nEingabe > ").strip().lower()
            
            if user_input == 'q':
                break
            elif user_input == 'status':
                show_system_status()
            elif user_input == 'web':
                handle_web_command()
            elif user_input == 'slides':
                show_slides_info()
            elif user_input == 'demo':
                handle_demo_command()
            elif user_input == 'test':
                logger.info("üß™ Hardware-Test wird durchgef√ºhrt...")
                setup_hardware()
            elif user_input == 'help' or user_input == '?':
                print("Verf√ºgbare Befehle: status, web, slides, demo, test, q")
            elif user_input == '':
                continue
            else:
                logger.info(f"Unbekannter Befehl: {user_input}")
                print("Tipp: 'help' f√ºr verf√ºgbare Befehle")
                
    except KeyboardInterrupt:
        logger.info("üëã Textmodus durch Benutzer beendet")

def show_system_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    logger.info("üìä System-Status wird angezeigt...")
    
    # Hardware Status
    hw_status = hardware_manager.get_status_summary()
    print("\nüîå Hardware Status:")
    for device, status in hw_status.items():
        status_icon = "‚úÖ" if status == "connected" else "‚ùå"
        print(f"  {status_icon} {device}: {status}")
    
    # Web Server Status
    server_info = web_server.get_server_info()
    print(f"\nüåê Web-Server: {'‚úÖ L√§uft' if server_info['running'] else '‚ùå Gestoppt'}")
    if server_info['running']:
        print(f"  URL: {server_info['url']}")
        print(f"  Aktuelle Folie: {server_info['current_slide']}")
    
    # Content Status
    from models.content import content_manager
    print(f"\nüìã Pr√§sentation: {content_manager.get_slide_count()} Folien verf√ºgbar")

def handle_web_command():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–∫–æ–º–∞–Ω–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    server_info = web_server.get_server_info()
    
    if server_info['running']:
        print(f"\nüåê Web-Server l√§uft: {server_info['url']}")
        choice = input("Web-Server stoppen? (j/n): ").strip().lower()
        if choice == 'j' or choice == 'y':
            if web_server.stop_server():
                print("‚úÖ Web-Server gestoppt")
            else:
                print("‚ùå Fehler beim Stoppen")
    else:
        print("\nüåê Web-Server ist gestoppt")
        choice = input("Web-Server starten? (j/n): ").strip().lower()
        if choice == 'j' or choice == 'y':
            if web_server.start_server():
                new_info = web_server.get_server_info()
                print(f"‚úÖ Web-Server gestartet: {new_info['url']}")
            else:
                print("‚ùå Fehler beim Starten (Port belegt?)")

def show_slides_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–∞–π–¥–∞—Ö"""
    from models.content import content_manager
    
    slides = content_manager.get_all_slides()
    print(f"\nüìã Pr√§sentation: {len(slides)} Folien")
    
    for slide_id, slide in sorted(slides.items()):
        title = slide.title[:40] + "..." if len(slide.title) > 40 else slide.title
        print(f"  {slide_id:2d}. {title}")
    
    stats = content_manager.get_presentation_statistics()
    print(f"\nüìä Statistiken:")
    print(f"  Gesamt Bilder: {stats['total_images']}")
    print(f"  Gesamt Text: {stats['total_content_length']} Zeichen")

def handle_demo_command():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ demo-–∫–æ–º–∞–Ω–¥"""
    from services.demo import demo_service
    
    status = demo_service.get_status()
    
    if status['running']:
        print(f"\n‚ñ∂Ô∏è Demo l√§uft (Folie {status['current_slide']}/{status['total_slides']})")
        choice = input("Demo stoppen? (j/n): ").strip().lower()
        if choice == 'j' or choice == 'y':
            demo_service.stop_demo()
            print("‚úÖ Demo gestoppt")
    else:
        print(f"\n‚èπÔ∏è Demo gestoppt (Folie {status['current_slide']}/{status['total_slides']})")
        choice = input("Demo starten? (j/n): ").strip().lower()
        if choice == 'j' or choice == 'y':
            demo_service.start_demo()
            print("‚úÖ Demo gestartet")

def main():
    """Hauptfunktion —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    # Argument-Parser
    parser = argparse.ArgumentParser(description='Dynamic Messe Stand V4 mit Web-Server')
    parser.add_argument('--esp32-port', help='ESP32 Port (Standard: /dev/ttyUSB0)')
    parser.add_argument('--no-hardware', action='store_true', help='Ohne Hardware-Verbindungen starten')
    parser.add_argument('--no-web', action='store_true', help='Web-Server nicht automatisch starten')
    parser.add_argument('--web-port', type=int, default=8080, help='Web-Server Port (Standard: 8080)')
    parser.add_argument('--debug', action='store_true', help='Debug-Modus aktivieren')
    parser.add_argument('--text-mode', action='store_true', help='Textmodus ohne GUI starten')
    
    args = parser.parse_args()
    
    # Logging-Level setzen
    if args.debug:
        import logging
        logging.getLogger().setLevel(logging.DEBUG)
        logger.info("Debug-Modus aktiviert")
    
    # Web-Server Port konfigurieren
    if args.web_port != 8080:
        web_server.port = args.web_port
        logger.info(f"Web-Server Port ge√§ndert: {args.web_port}")
    
    logger.info("üöÄ Dynamic Messe Stand V4 wird gestartet...")
    logger.info(f"Python Version: {sys.version}")
    logger.info(f"Arbeitsverzeichnis: {os.getcwd()}")
    
    try:
        # Web-Server Setup (falls gew√ºnscht)
        if not args.no_web:
            web_success = setup_web_server(auto_start=True)
            if not web_success:
                logger.warning("‚ö†Ô∏è Web-Server konnte nicht automatisch gestartet werden")
        else:
            logger.info("üîß Web-Server-Setup √ºbersprungen (--no-web)")
        
        # Hardware-Setup (falls gew√ºnscht)
        if not args.no_hardware:
            hardware_success = setup_hardware()
            if not hardware_success:
                logger.warning("‚ö†Ô∏è Keine Hardware-Verbindungen erfolgreich - Anwendung startet trotzdem")
        else:
            logger.info("üîß Hardware-Setup √ºbersprungen (--no-hardware)")
        
        # Anwendung starten
        if args.text_mode:
            run_text_mode()
        else:
            create_and_run_gui(esp32_port=args.esp32_port)
        
    except KeyboardInterrupt:
        logger.info("üëã Anwendung durch Benutzer beendet")
    except Exception as e:
        logger.error(f"üí• Unerwarteter Fehler: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Cleanup
        logger.info("üßπ Cleanup wird durchgef√ºhrt...")
        
        # Web-Server –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
        try:
            if web_server.running:
                web_server.stop_server()
        except Exception as e:
            logger.error(f"Fehler beim Stoppen des Web-Servers: {e}")
        
        # Hardware-Verbindungen trennen
        try:
            hardware_manager.disconnect_all()
        except Exception as e:
            logger.error(f"Fehler beim Trennen der Hardware: {e}")
        
        # Demo stoppen
        try:
            from services.demo import demo_service
            demo_service.stop_demo()
        except Exception as e:
            logger.error(f"Fehler beim Stoppen der Demo: {e}")
        
        logger.info("üëã Dynamic Messe Stand V4 beendet")

if __name__ == "__main__":
    main()
